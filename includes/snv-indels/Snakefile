include: "common.smk"


# Put each sample name in a SimpleNamespace to mimic Snakemake wildcard usage
# (e.g {wildcards.sample}). This is only used in the 'all' rule.
samples = [SimpleNamespace(sample=sample) for sample in pep.sample_table["sample_name"]]


localrules:
    filter_vep_target,
    filter_vep_high,


rule all:
    input:
        bam=[module_output.bam(sample) for sample in samples],
        vep_high=[module_output.vep_high(sample) for sample in samples],
        vep_target=[module_output.vep_target(sample) for sample in samples],
        json=[module_output.json(sample) for sample in samples],
        hotspot=[module_output.hotspot(sample) for sample in samples],


rule align_vars:
    input:
        fq1=get_forward,
        fq2=get_reverse,
        index=config["star_index"],
        gtf=config["gtf"],
    output:
        bam="{sample}/snv-indels/Aligned.sortedByCoord.out.bam",
        gene_count="{sample}/snv-indels/ReadsPerGene.out.tab",
    params:
        rg_sample=lambda wildcards: wildcards.sample,
        chim_segment=20,
        min_intron_size=50,
        alignInsertionFlush="Right",
        twopassMode="Basic",
    log:
        main="{sample}/snv-indels/Log.out",
        progress="{sample}/snv-indels/Log.progress.out",
        final="{sample}/snv-indels/Log.final.out",
    threads: 8
    container:
        containers["star"]
    shell:
        """
        STAR \
            --runThreadN {threads} \
            --genomeDir {input.index} \
            --sjdbGTFfile {input.gtf} \
            --readFilesCommand zcat \
            --outSAMattrRGline "ID:{params.rg_sample}" "SM:{params.rg_sample}" \
            --outFileNamePrefix $(dirname {output.bam})/ \
            --outSAMtype BAM SortedByCoordinate \
            --alignIntronMin {params.min_intron_size} \
            --alignInsertionFlush {params.alignInsertionFlush} \
            --twopassMode {params.twopassMode} \
            --chimOutType WithinBAM \
            --chimSegmentMin {params.chim_segment} \
            --quantMode GeneCounts \
            --readFilesIn {input.fq1:q} {input.fq2:q}
        """


rule index_bamfile:
    input:
        bam="{sample}/snv-indels/Aligned.sortedByCoord.out.bam",
    output:
        bai="{sample}/snv-indels/Aligned.sortedByCoord.out.bam.bai",
    params:
        tmp=temp("tmp"),
    log:
        "log/index_bamfile.{sample}.txt",
    container:
        containers["varscan-2.4.2-samtools-1.3.1-tabix-0.2.6-grep-2.14"]
    shell:
        """
        samtools index {input.bam} 2> {log}
        """


rule reorder_aln_header:
    input:
        bam="{sample}/snv-indels/Aligned.sortedByCoord.out.bam",
        bai="{sample}/snv-indels/Aligned.sortedByCoord.out.bam.bai",
        ref=config["genome_fasta"],
        refd=config["genome_dict"],
    output:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
    params:
        rg_sample=lambda wildcards: wildcards.sample,
    log:
        "log/reorder_aln_header.{sample}.txt",
    threads: 1
    container:
        containers["picard"]
    shell:
        """
        picard -Xmx4G ReorderSam \
            I={input.bam} \
            SD={input.bam} \
            O={output.bam} \
            R={input.ref} \
            VALIDATION_STRINGENCY=SILENT \
            CREATE_INDEX=true 2> {log}
        """


rule genome_txt:
    input:
        ref_dict=config["genome_dict"],
    output:
        genome=temp(".tmp.genome.txt"),
    log:
        "log/tmp.genome.txt",
    container:
        containers["varscan-2.4.2-samtools-1.3.1-tabix-0.2.6-grep-2.14"]
    shell:
        """
        cat {input.ref_dict} \
        | grep -P "@SQ\\tSN:" \
        | sed 's/@SQ\\tSN://' \
        | sed 's/\\tLN:/\\t/' \
        | cut -f1,2 \
        > {output.genome} 2> {log}
        """


rule exon_cov_ref:
    input:
        ref_fai=config["genome_fai"],
        ref_refflat=config["annotation_refflat"],
    output:
        bed=temp(".tmp.exon_cov_ref.bed"),
    log:
        "log/exon_cov_ref.txt",
    container:
        containers["bedtools-2.27-grep-2.14-gawk-5.0-python-3.7"]
    shell:
        """
        cat {input.ref_refflat} \
         | grep -vP "chr.*(alt|random|fix)\t" \
         | awk \'{{ split($10, starts, ","); split($11, ends, ","); for (i=1; i < length(starts); i++) {{ print $3"\\t"starts[i]"\\t"ends[i]"\\t"gensub(/(\.[0-9]+)/,"", "g", $2)"\\t"i"\\t"$4 }} }}\' \
         | bedtools sort -faidx {input.ref_fai} \
         > {output.bed} 2> {log}
        """


rule exon_cov:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bed=".tmp.exon_cov_ref.bed",
        genome=".tmp.genome.txt",
        idm=config["ref_id_mapping"],
        scr=srcdir("scripts/aggr_exon_cov.py"),
    output:
        json="{sample}/snv-indels/{sample}.exon_cov_stats.json",
    log:
        "log/exon_cov.{sample}.txt",
    container:
        containers["bedtools-2.27-grep-2.14-gawk-5.0-python-3.7"]
    shell:
        """
        bedtools coverage \
            -d \
            -sorted \
            -g {input.genome} \
            -a {input.bed} \
            -b {input.bam} 2> {log} \
        | cut -f1,2,3,4,5,8,7 \
        | python {input.scr} \
            --id-mapping {input.idm} - {output.json} 2> {log}
        """


rule call_vars:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        ref=config["genome_fasta"],
    output:
        vcf="{sample}/snv-indels/{sample}.raw.vcf.gz",
    log:
        "log/call_vars.{sample}.txt",
    threads: 3
    container:
        containers["varscan-2.4.2-samtools-1.3.1-tabix-0.2.6-grep-2.14"]
    shell:
        """
        samtools mpileup \
            -f {input.ref} \
            -d 1000000 \
            -s \
            -B {input.bam} \
        | grep -vP '\\t\\t' \
        | varscan mpileup2cns \
            --strand-filter 0 \
            --output-vcf 1 \
            --min-var-freq 0.1 \
            --p-value 0.05 2> {log} \
        | grep -vP '\\t\./\.|\\t0/0' \
        | bgzip -c > {output.vcf}
        """


rule aln_stats:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
        ref=config["genome_fasta"],
        ref_dict=config["genome_dict"],
    output:
        stats="{sample}/snv-indels/{sample}.aln_stats",
    log:
        "log/aln_stats.{sample}.txt",
    threads: 1
    container:
        containers["picard"]
    shell:
        """
        picard -Xmx4G CollectAlignmentSummaryMetrics \
            VALIDATION_STRINGENCY=LENIENT \
            R={input.ref} \
            I={input.bam} \
            O={output.stats} 2> {log}
        """


rule insert_stats:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
        ref=config["genome_fasta"],
        ref_dict=config["genome_dict"],
    output:
        stats="{sample}/snv-indels/{sample}.insert_stats",
        histo="{sample}/snv-indels/{sample}.insert_stats.pdf",
    log:
        "log/insert_stats.{sample}.txt",
    threads: 1
    container:
        containers["picard"]
    shell:
        """
        picard -Xmx4G CollectInsertSizeMetrics \
            VALIDATION_STRINGENCY=LENIENT \
            R={input.ref} \
            I={input.bam} \
            O={output.stats} \
            H={output.histo} 2> {log}
        """


rule rna_stats:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
        ref=config["genome_fasta"],
        ref_dict=config["genome_dict"],
        ref_rrna=config["rrna_refflat"],
        annot=config["annotation_refflat"],
    output:
        stats="{sample}/snv-indels/{sample}.rna_stats",
        histo="{sample}/snv-indels/{sample}.rna_stats.pdf",
    log:
        "log/rna_stats.{sample}.txt",
    threads: 1
    container:
        containers["picard"]
    shell:
        """
        picard -Xmx4G CollectRnaSeqMetrics \
             VALIDATION_STRINGENCY=LENIENT \
             R={input.ref} \
             REF_FLAT={input.annot} \
             RIBOSOMAL_INTERVALS={input.ref_rrna} \
             STRAND_SPECIFICITY=NONE \
             ASSUME_SORTED=true \
             CHART_OUTPUT={output.histo} \
             I={input.bam} \
             O={output.stats} 2> {log}
        """


rule annotate_vars:
    input:
        vcf="{sample}/snv-indels/{sample}.raw.vcf.gz",
        genome_fasta=config["genome_fasta"],
    params:
        online="" if config.get("cache_vep") else "--database",
        offline=f" --offline --cache_version 108 --everything --merged --dir {config['cache_vep']}"
        if config.get("cache_vep")
        else "",
        freq_filter=" --af_gnomade --check_frequency" if config.get("cache_vep") else "",
        max_af=0.05,
    output:
        vep="{sample}/snv-indels/{sample}.vep.txt.gz",
        stats="{sample}/snv-indels/{sample}.vep_stats.txt",
    log:
        "log/annotate_vars.{sample}.txt",
    threads: 8
    container:
        containers["vep"]
    shell:
        """
        vep \
            -i {input.vcf} \
            --fasta {input.genome_fasta} \
            {params.online} \
            {params.offline} \
            {params.freq_filter} \
            --fork {threads} \
            --allele_number --stats_text --json --force_overwrite --assembly GRCh38 \
            --format vcf \
            --polyphen b \
            --sift b \
            --hgvs \
            --af \
            --freq_pop gnomADe \
            --freq_freq {params.max_af} \
            --freq_gt_lt gt \
            --freq_filter exclude \
            --stats_file {output.stats} \
            --output_file STDOUT | gzip > {output.vep}\
            2> {log}
        """


rule hotspot_variants:
    input:
        vcf="{sample}/snv-indels/{sample}.raw.vcf.gz",
        bed=config["bed_variant_hotspots"],
    output:
        vcf="{sample}/snv-indels/{sample}.hotspot.vcf",
    log:
        "log/hotspot_variants.{sample}.txt",
    threads: 1
    container:
        containers["bedtools-2.27-grep-2.14-gawk-5.0-python-3.7"]
    shell:
        """
        bedtools intersect \
            -a {input.vcf} \
            -b {input.bed} \
            -header \
            > {output.vcf} 2> {log}
        """


rule filter_vep_target:
    input:
        vep="{sample}/snv-indels/{sample}.vep.txt.gz",
        ref_id_mapping=config["ref_id_mapping"],
        hotspots="{sample}/snv-indels/{sample}.hotspot.vcf",
        scr=srcdir("scripts/filter_vep.py"),
    output:
        high="{sample}/snv-indels/{sample}.vep.target.txt.gz",
    log:
        "log/filter_vep_target.{sample}.txt",
    threads: 1
    container:
        containers["hamlet-scripts"]
    shell:
        """
        python3 {input.scr} \
            {input.vep} \
            {input.ref_id_mapping} \
            --hotspot {input.hotspots} \
            | gzip > {output.high} 2> {log}
        """


rule filter_vep_high:
    input:
        vep="{sample}/snv-indels/{sample}.vep.txt.gz",
        ref_id_mapping=config["ref_id_mapping"],
        hotspots="{sample}/snv-indels/{sample}.hotspot.vcf",
        scr=srcdir("scripts/filter_vep.py"),
    params:
        vep_consequences=config["vep_include_consequence"],
    output:
        high="{sample}/snv-indels/{sample}.vep.high.txt.gz",
    log:
        "log/filter_vep_high.{sample}.txt",
    threads: 1
    container:
        containers["hamlet-scripts"]
    shell:
        """
        python3 {input.scr} \
            {input.vep} \
            {input.ref_id_mapping} \
            --hotspot {input.hotspots} \
            --consequences {params.vep_consequences} \
            | gzip > {output.high} 2> {log}
        """


rule json_output:
    input:
        id_mappings_path=config["ref_id_mapping"],
        vep_high="{sample}/snv-indels/{sample}.vep.high.txt.gz",
        aln_stats="{sample}/snv-indels/{sample}.aln_stats",
        rna_stats="{sample}/snv-indels/{sample}.rna_stats",
        insert_stats="{sample}/snv-indels/{sample}.insert_stats",
        exon_cov_stats="{sample}/snv-indels/{sample}.exon_cov_stats.json",
        vep_stats="{sample}/snv-indels/{sample}.vep_stats.txt",
        src=srcdir("scripts/json-output.py"),
    output:
        "{sample}/snv-indels/snv-indels-output.json",
    log:
        "log/snv_indels_output.{sample}.txt",
    container:
        containers["crimson"]
    shell:
        """
        python3 {input.src} \
            {input.id_mappings_path} \
            --vep_txt {input.vep_high} \
            --aln_stats_path {input.aln_stats} \
            --rna_stats_path {input.rna_stats} \
            --insert_stats_path {input.insert_stats} \
            --exon_cov_stats_path {input.exon_cov_stats} \
            --vep_stats_path {input.vep_stats} > {output} 2> {log}
        """
