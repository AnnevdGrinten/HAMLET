from rattle import Run

RUN = Run(config)

# TODO: ensure db indices exist
RUN.settings["genome_fasta_dict"] = RUN.settings["genome_fasta"].rsplit(".", 1)[0] + ".dict"

if RUN.settings.get("gsnap_exe") is not None:
    # To reproduce paper results, relies on a non-conda GSNAP 2014.12.23 with SIMD
    rule align_vars:
        input:
            fq1=RUN.output("{sample}/{sample}-R1.fq.gz"),
            fq2=RUN.output("{sample}/{sample}-R2.fq.gz"),
            index=RUN.settings["genome_gmap_index"],
            exe=RUN.settings["gsnap_exe"],
        output:
            bam=temp(RUN.output("{sample}/snv-indels/{sample}.snv-indel.raw.bam")),
            bai=temp(RUN.output("{sample}/snv-indels/{sample}.snv-indel.raw.bai")),
        params:
            rg_sample="{sample}"
        threads: 8
        conda: srcdir("envs/align_vars.yml")
        shell:
            "{input.exe} --dir `dirname {input.index}` --db `basename {input.index}`"
            " --batch 4 --nthreads {threads}"
            " --novelsplicing 1 --npaths 1 --quiet-if-excessive"
            " --read-group-name={params.rg_sample} --read-group-id={params.rg_sample}"
            " --format sam --gunzip {input.fq1} {input.fq2}"
            " | picard SortSam I=/dev/stdin O={output.bam} SORT_ORDER=coordinate"
            " VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true"

    rule reorder_aln_header:
        input:
            bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.raw.bam"),
            bai=RUN.output("{sample}/snv-indels/{sample}.snv-indel.raw.bai"),
            ref=RUN.settings["genome_fasta"],
            refd=RUN.settings["genome_fasta_dict"],
        output:
            bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
            bai=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bai"),
        params:
            rg_sample="{sample}"
        threads: 1
        conda: srcdir("envs/align_vars.yml")
        shell:
            "picard -Xmx3G ReorderSam I={input.bam} O={output.bam} R={input.ref}"
            " VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true"
else:
    rule align_vars:
        input:
            fq1=RUN.output("{sample}/{sample}-R1.fq.gz"),
            fq2=RUN.output("{sample}/{sample}-R2.fq.gz"),
            index=RUN.settings["genome_star_index"],
        output:
            bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
            bai=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bai"),
        params:
            rg_sample="{sample}"
        threads: 8
        conda: srcdir("envs/align_vars.yml")
        shell:
            "rm -rf `dirname {output.bam}`/alignment && "
            "mkdir -p `dirname {output.bam}`/alignment && "
            "STAR --outFileNamePrefix `dirname {output.bam}`/alignment/"
            " --genomeDir {input.index} --readFilesIn {input.fq1} {input.fq2}"
            " --readFilesCommand zcat --runThreadN {threads}"
            " --outStd SAM --outSAMunmapped Within --outFilterMultimapNmax 1"
            " --outSAMattrRGline ID:{params.rg_sample} SM:{params.rg_sample}"
            " | picard SortSam I=/dev/stdin O={output.bam} SORT_ORDER=coordinate"
            " VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true"

rule call_vars:
    input:
        bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
        ref=RUN.settings["genome_fasta"],
    output:
        vcf=RUN.output("{sample}/snv-indels/{sample}.raw.vcf.gz")
    threads: 3
    conda: srcdir("envs/call_vars.yml")
    shell:
        "samtools mpileup -f {input.ref} -d 1000000 -s -B {input.bam}"
        " | grep -vP '\\t\\t'"
        " | varscan mpileup2cns --strand-filter 0 --output-vcf 1 --min-var-freq 0.1 --p-value 0.05"
        " | grep -vP '\\t\./\.|\\t0/0'"
        " | bgzip -c > {output.vcf}"

rule aln_stats:
    input:
        bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
        bai=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bai"),
        ref=RUN.settings["genome_fasta"],
        ref_dict=RUN.settings["genome_fasta_dict"],
    output:
        stats=RUN.output("{sample}/snv-indels/{sample}.aln_stats")
    threads: 1
    conda: srcdir("envs/bam_stats.yml")
    shell:
        "picard -Xmx2G CollectAlignmentSummaryMetrics"
        " R={input.ref} I={input.bam} O={output.stats}"

rule rna_stats:
    input:
        bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
        bai=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bai"),
        ref=RUN.settings["genome_fasta"],
        ref_dict=RUN.settings["genome_fasta_dict"],
        annot=RUN.settings["annotation_refflat"],
    output:
        stats=RUN.output("{sample}/snv-indels/{sample}.rna_stats")
    threads: 1
    conda: srcdir("envs/bam_stats.yml")
    shell:
        "picard -Xmx4G CollectRnaSeqMetrics"
        " R={input.ref} REF_FLAT={input.annot}"
        " STRAND_SPECIFICITY=NONE ASSUME_SORTED=true"
        " CHART_OUTPUT={output.stats}.pdf I={input.bam} O={output.stats}"
