include: "common.smk"


rule all:
    input:
        coverage=[module_output.coverage(sample) for sample in samples],
        normalized_expression=[
            module_output.normalized_expression(sample) for sample in samples
        ],
        forward_library="merged_expression_forward_mqc.tsv",


rule bed_coverage:
    input:
        bam=get_bam,
        bed=config["bed"],
        src=srcdir("scripts/coverage.py"),
    output:
        coverage="{sample}/expression/coverage.csv",
    log:
        "log/bed_coverage.{sample}.txt",
    threads: 1
    container:
        containers["pysam"]
    shell:
        """
        python3 {input.src} \
            --bed {input.bed} \
            --bam {input.bam} \
            > {output.coverage} 2> {log}
        """


rule normalized_coverage:
    input:
        coverage=rules.bed_coverage.output.coverage,
        counts=get_counts,
        gtf=config["gtf"],
        src=srcdir("scripts/expression.py"),
    params:
        housekeeping=config["housekeeping"],
    output:
        normalized="{sample}/expression/coverage.normalized.csv",
    log:
        "log/normalized_coverage.{sample}.txt",
    threads: 1
    container:
        containers["pysam"]
    shell:
        """
        python3 {input.src} \
            --coverage {input.coverage} \
            --counts {input.counts} \
            --housekeeping-genes {params.housekeeping} \
            --gtf {input.gtf} \
            > {output.normalized} 2> {log}
        """


rule merge_samples:
    input:
        counts=[module_output.normalized_expression(sample) for sample in samples],
        src=srcdir("scripts/multiqc.py"),
    params:
        samples=[sample.sample for sample in samples],
    output:
        unstranded="merged_expression_unstranded_mqc.tsv",
        forward="merged_expression_forward_mqc.tsv",
        reverse_="merged_expression_reverse_mqc.tsv",
    log:
        "log/merge_samples.txt",
    threads: 1
    container:
        containers["multiqc"]
    shell:
        """
        python3 {input.src} \
            --counts {input.counts} \
            --samples {params.samples} \
            --strand unstranded \
            > {output.unstranded} 2> {log}

        python3 {input.src} \
            --counts {input.counts} \
            --samples {params.samples} \
            --strand forward \
            > {output.forward} 2>> {log}

        python3 {input.src} \
            --counts {input.counts} \
            --samples {params.samples} \
            --strand reverse \
            > {output.reverse_} 2>> {log}
        """
