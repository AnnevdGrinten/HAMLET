from rattle import Run
from os import path

RUN = Run(config)

# TODO: ensure gtf exists
RUN.set_default_setting("base_count_script", srcdir(path.join("scripts", "hist2count.py")))
RUN.set_default_setting("aggr_base_count_script", srcdir(path.join("scripts", "aggr_base_count.R")))
RUN.set_default_setting("calc_ratio_script", srcdir(path.join("scripts", "calc_ratio.py")))

RUN.set_default_setting("relative_gene_name", "HMBS")

if not RUN.settings.get("exon_names", []):
    raise ValueError("No exon names for exon ratio calculation defined")

containers = {
    # bedtools=v2.26.0,python=2.7.14
    "bedtools": "docker://quay.io/biocontainers/mulled-v2-3251e6c49d800268f0bc575f28045ab4e69475a6:4ce073b219b6dabb79d154762a9b67728c357edb-0",
    "htseq": "docker://quay.io/biocontainers/htseq:0.11.2--py27h637b7d7_1",
    "picard": "docker://quay.io/biocontainers/picard:2.20.5--0",
    "hamlet-scripts": "docker://lumc/hamlet-scripts:0.2"
}

rule all:
    input:
        base_per_exon=[RUN.output(f) for f in expand("{sample}/expression/{sample}.bases_per_exon" ,sample=RUN.samples)]
        #base_per_gene=expand("{sample}.bases_per_gene", sample=RUN.samples),
        #exon_ratio=expand("{sample}.exon_ratios", sample=RUN.samples),
        #fragment_per_gene=expand("{sample}.fragments_per_gene", sample=RUN.samples),
        #raw_base=expand("{sample}.raw_base", sample=RUN.samples)

rule idsort_aln:
    input:
        bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
    output:
        bam=temp(RUN.output("{sample}/snv-indels/{sample}.snv-indel.idsorted.bam")),
    threads: 1
    conda: srcdir("envs/idsort_aln.yml")
    singularity: containers["picard"]
    shell:
        "picard SortSam I={input.bam} O={output.bam} SORT_ORDER=queryname"
        " VALIDATION_STRINGENCY=SILENT CREATE_INDEX=false"

rule count_fragments:
    input:
        bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.idsorted.bam"),
        gtf=RUN.settings["expression_gtf"],
    output:
        count=RUN.output("{sample}/expression/{sample}.fragments_per_gene"),
    threads: 1
    conda: srcdir("envs/count_fragments.yml")
    singularity: containers["htseq"]
    shell:
        "htseq-count --format bam --order name --stranded no"
        " {input.bam} {input.gtf} > {output.count}"

rule count_raw_bases:
    input:
        bam=RUN.output("{sample}/snv-indels/{sample}.snv-indel.bam"),
        bed=RUN.settings["expression_bed"],
        count_script=RUN.settings["base_count_script"],
    output:
        raw_base_count=RUN.output("{sample}/expression/{sample}.raw_base"),
    threads: 1
    conda: srcdir("envs/count_bases.yml")
    singularity: containers["bedtools"]
    shell:
        "bedtools coverage -split -hist -abam {input.bam} -b {input.bed}"
        " | python {input.count_script} -c 3 > {output.raw_base_count}"

rule count_bases_exon:
    input:
        raw=RUN.output("{sample}/expression/{sample}.raw_base"),
        aggr_script=RUN.settings["aggr_base_count_script"],
    output:
        count=RUN.output("{sample}/expression/{sample}.bases_per_exon"),
    params:
        sample="{sample}"
    threads: 1
    conda: srcdir("envs/count_bases.yml")
    singularity: containers["hamlet-scripts"]
    shell:
        "Rscript {input.aggr_script} -I {input.raw} -N {params.sample}"
        " -E {output.count}"

rule count_bases_gene:
    input:
        raw=RUN.output("{sample}/expression/{sample}.raw_base"),
        aggr_script=RUN.settings["aggr_base_count_script"],
    output:
        count=RUN.output("{sample}/expression/{sample}.bases_per_gene"),
    params:
        sample="{sample}"
    threads: 1
    conda: srcdir("envs/count_bases.yml")
    singularity: containers["hamlet-scripts"]
    shell:
        "Rscript {input.aggr_script} -I {input.raw} -N {params.sample}"
        " -G {output.count}"

rule calc_exon_ratios:
    input:
        table=RUN.output("{sample}/expression/{sample}.bases_per_exon"),
        calc_script=RUN.settings["calc_ratio_script"],
    output:
        table=RUN.output("{sample}/expression/{sample}.exon_ratios"),
    params:
        exon_ratio_names=" ".join([RUN.settings["relative_gene_name"]] +
                                  RUN.settings.get("exon_names")),
        exon_min_ratio=RUN.settings["exon_min_ratio"],
    threads: 1
    conda: srcdir("envs/calc_ratio.yml")
    singularity: containers["hamlet-scripts"]
    shell:
        "cat {input.table}"
        " | python {input.calc_script} -r {params.exon_min_ratio}"
        " - {params.exon_ratio_names}"
        " > {output.table}"
