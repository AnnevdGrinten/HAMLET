include: "common.smk"


rule all:
    input:
        multiqc="multiqc_expression.html",
        unstranded=[
            f"{sample.sample}/expression/seAMLess.unstranded.tsv" for sample in samples
        ],


rule normalized_coverage:
    input:
        bam=get_bam,
        counts=get_counts,
        gtf=config["gtf"],
        bed=config["bed"],
        src=srcdir("scripts/coverage.py"),
    params:
        housekeeping=config["housekeeping"],
    output:
        normalized="{sample}/expression/coverage.normalized.csv",
        raw="{sample}/expression/coverage.csv",
    log:
        "log/normalized_coverage.{sample}.txt",
    threads: 1
    container:
        containers["pysam"]
    shell:
        """
        # Calculate the normalized coverage
        python3 {input.src} \
            --bam {input.bam} \
            --counts {input.counts} \
            --housekeeping {params.housekeeping} \
            --gtf {input.gtf} \
            --bed {input.bed} \
            > {output.normalized} 2> {log}

        # Extract the raw coverage counts
        python3 {input.src} \
            --bam {input.bam} \
            --counts {input.counts} \
            --housekeeping {params.housekeeping} \
            --gtf {input.gtf} \
            --bed {input.bed} \
            --raw \
            > {output.raw} 2>> {log}
        """


rule transform_counts:
    """Transform the counts table to use with seAMLess"""
    input:
        counts=get_counts,
        src=srcdir("scripts/transform_counts.py"),
    output:
        unstranded="{sample}/expression/seAMLess.unstranded.tsv",
        forward="{sample}/expression/seAMLess.forward.tsv",
        reverse_="{sample}/expression/seAMLess.reverse.tsv",
    log:
        "log/transform_counts.{sample}.txt",
    threads: 1
    container:
        containers["pysam"]
    shell:
        """
        python3 {input.src} \
            --counts {input.counts} \
            --strand unstranded \
            --sample {wildcards.sample} \
            > {output.unstranded} 2> {log}

        python3 {input.src} \
            --counts {input.counts} \
            --strand forward \
            --sample {wildcards.sample} \
            > {output.forward} 2>> {log}

        python3 {input.src} \
            --counts {input.counts} \
            --strand reverse\
            --sample {wildcards.sample} \
            > {output.reverse_} 2>> {log}
        """


rule merge_samples:
    input:
        counts=[module_output.normalized_expression(sample) for sample in samples],
        src=srcdir("scripts/multiqc.py"),
    params:
        samples=[sample.sample for sample in samples],
    output:
        unstranded="merged_expression_unstranded_mqc.tsv",
        forward="merged_expression_forward_mqc.tsv",
        reverse_="merged_expression_reverse_mqc.tsv",
    log:
        "log/merge_samples.txt",
    threads: 1
    container:
        containers["multiqc"]
    shell:
        """
        python3 {input.src} \
            --counts {input.counts} \
            --samples {params.samples} \
            --strand unstranded \
            > {output.unstranded} 2> {log}

        python3 {input.src} \
            --counts {input.counts} \
            --samples {params.samples} \
            --strand forward \
            > {output.forward} 2>> {log}

        python3 {input.src} \
            --counts {input.counts} \
            --samples {params.samples} \
            --strand reverse \
            > {output.reverse_} 2>> {log}
        """


rule multiqc:
    input:
        stats=module_output.multiqc_files,
        config=srcdir("../../cfg/multiqc.yml"),
    params:
        filelist="multiqc_filelist.txt",
        depth=2,
    output:
        html="multiqc_expression.html",
    log:
        "log/expression.multiqc.txt",
    container:
        containers["multiqc"]
    shell:
        """
        rm -f {params.filelist}

        for fname in {input.stats}; do
            echo $fname >> {params.filelist}
        done

        multiqc \
        --force \
        --dirs \
        --dirs-depth {params.depth} \
        --fullnames \
        --fn_as_s_name \
        --file-list {params.filelist} \
        --config {input.config} \
        --filename {output.html} 2> {log}
        """
