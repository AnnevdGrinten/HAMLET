from os import path
from rattle import Run, ReadGroup


RUN = Run(config)

RUN.set_default_setting("contaminants_file", srcdir(path.join("defaults", "contaminant_list_fastqc_v0115.txt")))
RUN.set_default_setting("cts_helper", srcdir(path.join("helpers", "clip_trim_sync.py")))
RUN.set_default_setting("sync_script", srcdir(path.join("scripts", "sync_fq.py")))
RUN.set_default_setting("rg_stats_script", srcdir(path.join("scripts", "gather_rg_stats.py")))
RUN.set_default_setting("sample_stats_script", srcdir(path.join("scripts", "gather_sample_stats.py")))


rule all_qc:
    input:
        fqs=[RUN.output("{sample}/{sample}-{pair}.fq.gz", fmt=True,
                        sample=unit.sample, pair=pair)
             for unit in RUN.unit_names for pair in ("R1", "R2")],
        stats=expand(RUN.output("{sample}/qc-seq/{sample}-seq-stats.json"),
                     sample=RUN.samples),


rule fastqc_raw:
    """Runs FastQC for each pair of each read group of each sample given in the config file."""
    input:
        fq=RUN.config_input_func(ReadGroup, "{pair}"),
    output:
        dir=RUN.output("{sample}/qc-seq/{read_group}/fastqc-{{pair}}-raw", fmt=True),
    threads: 4
    conda: srcdir("envs/fastqc.yml")
    shell:
        "mkdir -p {output.dir}"
        " && fastqc -o {output.dir} --extract --nogroup -f fastq --threads {threads} {input.fq}"


rule clip_trim_sync:
    """Clips FastQC-detected adapter sequences and then trims low quality bases from all read pairs."""
    input:
        fq1=RUN.config_input_func(ReadGroup, "R1"),
        fq2=RUN.config_input_func(ReadGroup, "R2"),
        fqc1=RUN.output("{sample}/qc-seq/{read_group}/fastqc-R1-raw", fmt=True),
        fqc2=RUN.output("{sample}/qc-seq/{read_group}/fastqc-R2-raw", fmt=True),
        contams_file=RUN.settings["contaminants_file"],
        cts_helper=RUN.settings["cts_helper"],
        sync_script=RUN.settings["sync_script"],
    output:
        fq1=temp(RUN.output("{sample}/qc-seq/{read_group}/{sample}-{read_group}-R1.fq.gz")),
        fq2=temp(RUN.output("{sample}/qc-seq/{read_group}/{sample}-{read_group}-R2.fq.gz")),
        stats=RUN.output("{sample}/qc-seq/{read_group}/{sample}-{read_group}.cts-stats.json"),
    threads: 2
    conda: srcdir("envs/clip_trim_sync.yml")
    shell:
        "python {input.cts_helper} --i1 {input.fq1} --i2 {input.fq2}"
        " --fqc1 {input.fqc1} --fqc2 {input.fqc2}"
        " --o1 {output.fq1} --o2 {output.fq2} --contaminants {input.contams_file}"
        " --sync-scr {input.sync_script} --stats {output.stats}"


rule fastqc_processed:
    """Runs FastQC for each pair of QC-ed inputs."""
    input:
        fq=RUN.output("{sample}/qc-seq/{read_group}/{sample}-{read_group}-{pair}.fq.gz"),
    output:
        dir=RUN.output("{sample}/qc-seq/{read_group}/fastqc-{pair}-processed"),
    threads: 4
    conda: srcdir("envs/fastqc.yml")
    shell:
        "mkdir -p {output.dir}"
        " && fastqc -o {output.dir} --extract --nogroup -f fastq --threads {threads} {input.fq}"


rule rg_stats:
    """Gathers read statistics on the read group level."""
    input:
        raw1=RUN.output("{sample}/qc-seq/{read_group}/fastqc-R1-raw"),
        raw2=RUN.output("{sample}/qc-seq/{read_group}/fastqc-R2-raw"),
        proc1=RUN.output("{sample}/qc-seq/{read_group}/fastqc-R1-processed"),
        proc2=RUN.output("{sample}/qc-seq/{read_group}/fastqc-R2-processed"),
        rg_stats_script=RUN.settings["rg_stats_script"],
    output:
        stats=temp(RUN.output("{sample}/qc-seq/{read_group}/stats.json")),
    conda: srcdir("envs/rg_stats.yml")
    shell:
        "python {input.rg_stats_script} --name {wildcards.read_group}"
        " {input.raw1} {input.raw2} {input.proc1} {input.proc2}"
        " > {output.stats}"


rule sample_stats:
    """Gathers read statistics on the sample level."""
    input:
        rg_stats=lambda wildcards: [RUN.output("{sample}/qc-seq/{read_group}/stats.json",
                                               fmt=True, sample=wildcards.sample, read_group=rgn)
                                    for rgn in RUN.samples[wildcards.sample].read_groups],
        sample_stats_script=RUN.settings["sample_stats_script"],
    output:
        stats=RUN.output("{sample}/qc-seq/{sample}-seq-stats.json")
    shell:
        "python {input.sample_stats_script} --name {wildcards.sample}"
        " {input.rg_stats} > {output.stats}"


rule merge_fastqs:
    """Merges all FASTQ files for a given sample from its read groups."""
    input:
        fqs=lambda wildcards: [RUN.output("{sample}/qc-seq/{read_group}/{sample}-{read_group}-{pair}.fq.gz",
                                          fmt=True, sample=wildcards.sample, read_group=rgn, pair=wildcards.pair)
                               for rgn in RUN.samples[wildcards.sample].read_groups]
    output:
        fq=RUN.output("{sample}/{sample}-{pair}.fq.gz"),
    shell:
        "zcat {input.fqs} | gzip -c > {output.fq}"
