include: "common.smk"


localrules:
    mktmp,


rule all:
    input:
        merged_forward=[module_output.forward(sample) for sample in samples],
        merged_reverse=[module_output.reverse(sample) for sample in samples],
        folder=[f"{wc.sample}/qc-seq/fastqc" for wc in samples],
        sequali_html=[f"{wc.sample}/qc-seq/sequali/{wc.sample}.html" for wc in samples],
        multiqc="multiqc_qc_seq.html",


rule mktmp:
    """Make a tmp folder for FastQC to use"""
    output:
        directory("tmp"),
    log:
        "log/mktmp",
    container:
        containers["fastqc"]
    shell:
        """
        mkdir -p {output} 2> {log}
        """


rule cutadapt:
    """Clip and merge fastq files"""
    input:
        fq1=get_forward_input,
        fq2=get_reverse_input,
    output:
        fq1="{sample}/qc-seq/{sample}-R1.fq.gz",
        fq2="{sample}/qc-seq/{sample}-R2.fq.gz",
        json="{sample}/qc-seq/{sample}.cutadapt.json",
    params:
        f_adapter=config["forward_adapter"],
        r_adapter=config["reverse_adapter"],
    log:
        "log/cutadapt.{sample}.txt",
    threads: 8
    container:
        containers["cutadapt"]
    shell:
        """
        cutadapt \
            -a {params.f_adapter} \
            -A {params.r_adapter} \
            --cores={threads} \
            --compression-level=1 \
            --minimum-length=20 \
            --quality-cutoff=20,20 \
            --output={output.fq1} \
            --paired-output={output.fq2} \
            --json={output.json} \
            <(pigz --decompress --stdout {input.fq1:q}) \
            <(pigz --decompress --stdout {input.fq2:q}) > {log}
        """


rule fastqc:
    input:
        fq1=module_output.forward,
        fq2=module_output.reverse,
        tmp="tmp",
    output:
        folder=directory("{sample}/qc-seq/fastqc"),
    params:
        memory=4096,
    log:
        "log/fastqc.{sample}.txt",
    threads: 4
    container:
        containers["fastqc"]
    shell:
        """
        mkdir -p {output.folder}

        fastqc \
            --outdir {output.folder} \
            --dir {input.tmp} \
            --extract \
            --nogroup \
            --threads {threads} \
            --memory {params.memory} \
            {input.fq1:q} {input.fq2:q} 2> {log}
        """


rule sequali:
    input:
        fq1=module_output.forward,
        fq2=module_output.reverse,
    output:
        json="{sample}/qc-seq/sequali/{sample}.json",
        html="{sample}/qc-seq/sequali/{sample}.html",
    log:
        stdout="log/sequali.{sample}.out.txt",
        stderr="log/sequali.{sample}.err.txt",
    threads: 4
    container:
        containers["sequali"]
    shell:
        """
        mkdir -p $(dirname {output.json}) 2> {log.stderr} > {log.stdout}

        sequali \
            --outdir $(dirname {output.json}) \
            --json $(basename {output.json}) \
            --html $(basename {output.html}) \
            --threads {threads} \
            {input.fq1} {input.fq2} 2>> {log.stderr} >> {log.stdout}
        """


rule multiqc:
    input:
        stats=module_output.multiqc_files,
        config=srcdir("../../cfg/multiqc.yml"),
    params:
        filelist="multiqc_filelist.txt",
        depth=2,
    output:
        html="multiqc_qc_seq.html",
    log:
        "log/qc_seq.multiqc.txt",
    container:
        containers["multiqc"]
    shell:
        """
        rm -f {params.filelist}

        for fname in {input.stats}; do
            echo $fname >> {params.filelist}
        done

        multiqc \
        --force \
        --dirs \
        --dirs-depth {params.depth} \
        --fullnames \
        --fn_as_s_name \
        --file-list {params.filelist} \
        --config {input.config} \
        --filename {output.html} 2> {log}
        """
