from rattle import Run
from os import path

RUN = Run(config)

RUN.set_default_setting("sf_subset_script", srcdir(path.join("scripts", "subset_sf.py")))
RUN.set_default_setting("plot_combined_script", srcdir(path.join("scripts", "combine_svgs.py")))

# We need the QC-seq output
include: "../qc-seq/Snakefile"

containers = {
    "debian": "docker://debian:buster-slim",
    "fsnviz": "docker://quay.io/biocontainers/fsnviz:0.3.0--py_3",
    "fuma": "docker://quay.io/biocontainers/fuma:3.0.5--py27h24bf2e0_1",
    "fusioncatcher": "docker://quay.io/biocontainers/fusioncatcher:1.20--2",
    "star-fusion": "docker://quay.io/biocontainers/star-fusion:1.6.0--1",
    "hamlet-scripts": "docker://lumc/hamlet-scripts:0.2"
}
localrules: star_fusion_cp, fusioncatcher_cp, plot_cp

rule all_fusion:
    input:
        star_predictions=expand(RUN.output("{sample}/fusion/star-fusion/star-fusion.fusion_predictions.tsv"), sample=RUN.samples),
        star_final=expand(RUN.output("{sample}/fusion/{sample}.star-fusion"), sample=RUN.samples),
        fusion_catcher=expand(RUN.output("{sample}/fusion/{sample}.fusioncatcher"), sample=RUN.samples),
        fuma=expand(RUN.output("{sample}/fusion/{sample}.fuma"), sample=RUN.samples),
        subset=expand(RUN.output("{sample}/fusion/{sample}.sf-isect"), sample=RUN.samples),
        is_svg=expand(RUN.output("{sample}/fusion/{sample}.sf-isect-circos/fsnviz.svg"), sample=RUN.samples),
        is_png=expand(RUN.output("{sample}/fusion/{sample}.sf-isect-circos/fsnviz.png"), sample=RUN.samples),
        sf_svg=expand(RUN.output("{sample}/fusion/{sample}.star-fusion-circos/fsnviz.svg"), sample=RUN.samples),
        sf_png=expand(RUN.output("{sample}/fusion/{sample}.star-fusion-circos/fsnviz.png"), sample=RUN.samples),
        fc_svg=expand(RUN.output("{sample}/fusion/{sample}.fusioncatcher-circos/fsnviz.svg"), sample=RUN.samples),
        fc_png=expand(RUN.output("{sample}/fusion/{sample}.fusioncatcher-circos/fsnviz.png"), sample=RUN.samples),
        combined_svg=expand(RUN.output("{sample}/fusion/{sample}.fusions-combined.svg"), sample=RUN.samples)

rule star_fusion:
    input:
        fq1=RUN.output("{sample}/{sample}-R1.fq.gz"),
        fq2=RUN.output("{sample}/{sample}-R2.fq.gz"),
        lib=RUN.settings["genome_star_fusion_lib"]
    params:
        folder=RUN.output("{sample}/fusion/star-fusion")
    output:
        txt=RUN.output("{sample}/fusion/star-fusion/star-fusion.fusion_predictions.tsv")
    threads: 8
    conda: srcdir("envs/star_fusion.yml")
    singularity: containers["star-fusion"]
    shell:
        "(rm -rf {params.folder}"
        " && STAR-Fusion --genome_lib_dir {input.lib}"
        "   --output_dir {params.folder}"
        "   --left_fq {input.fq1} --right_fq {input.fq2})"

rule star_fusion_cp:
    input:
        txt=RUN.output("{sample}/fusion/star-fusion/star-fusion.fusion_predictions.tsv"),
    output:
        txt=RUN.output("{sample}/fusion/{sample}.star-fusion"),
    singularity: containers["debian"]
    shell:
        "cp {input.txt} {output.txt}"

rule plot_sf:
    input:
        txt=RUN.output("{sample}/fusion/{sample}.star-fusion"),
    output:
        svg=RUN.output("{sample}/fusion/{sample}.star-fusion-circos/fsnviz.svg"),
        png=RUN.output("{sample}/fusion/{sample}.star-fusion-circos/fsnviz.png"),
    conda: srcdir("envs/plot_fusion.yml")
    singularity: containers["fsnviz"]
    shell:
        "PERL5LIB=\"\" fsnviz --out-dir `dirname {output.svg}` --png"
        " -k human.hg38 star-fusion {input.txt}"

rule plot_cp:
    input:
        svg=RUN.output("{sample}/fusion/{sample}.{ext}-circos/fsnviz.svg"),
    output:
        svg=RUN.output("{sample}/fusion/{sample}.{ext}.svg"),
    wildcard_constraints:
        ext="star-fusion|sf-isect|fusioncatcher",
    singularity: containers["debian"]
    shell:
        "cp {input.svg} {output.svg}"

rule fusioncatcher:
    input:
        fq1=RUN.output("{sample}/{sample}-R1.raw.fq.gz"),
        fq2=RUN.output("{sample}/{sample}-R2.raw.fq.gz"),
    params:
        data=RUN.settings["fusioncatcher_data"]
    output:
        txt=RUN.output("{sample}/fusion/fusioncatcher/final-list_candidate-fusion-genes.txt")
    threads: 8
    conda: srcdir("envs/fusioncatcher.yml")
    singularity: containers["fusioncatcher"]
    shell:
        " dir=`dirname {output.txt}` "
        " && fusioncatcher.py --threads {threads} -i {input.fq1},{input.fq2} -o ${{dir}}"
        " --data {params.data} || test -f {output.txt}"

rule fusioncatcher_cp:
    input:
        txt=RUN.output("{sample}/fusion/fusioncatcher/final-list_candidate-fusion-genes.txt"),
    output:
        txt=RUN.output("{sample}/fusion/{sample}.fusioncatcher"),
    singularity: containers["debian"]
    shell:
        "cp {input.txt} {output.txt}"

rule plot_fc:
    input:
        txt=RUN.output("{sample}/fusion/{sample}.fusioncatcher"),
    output:
        svg=RUN.output("{sample}/fusion/{sample}.fusioncatcher-circos/fsnviz.svg"),
        png=RUN.output("{sample}/fusion/{sample}.fusioncatcher-circos/fsnviz.png"),
    conda: srcdir("envs/plot_fusion.yml")
    singularity: containers["fsnviz"]
    shell:
        "PERL5LIB=\"\" fsnviz --out-dir `dirname {output.svg}` --png"
        " -k human.hg38 fusioncatcher {input.txt}"

rule intersect_fusions:
    input:
        sf=RUN.output("{sample}/fusion/{sample}.star-fusion"),
        fc=RUN.output("{sample}/fusion/{sample}.fusioncatcher"),
        bed=RUN.settings["transcripts_bed"],
    output:
        txt=RUN.output("{sample}/fusion/{sample}.fuma"),
    conda: srcdir("envs/intersect_fusions.yml")
    singularity: containers["fuma"]
    shell:
        "fuma -a hg38:{input.bed} -s"
        " fc-{wildcards.sample}:fusion-catcher_final:{input.fc}"
        " sf-{wildcards.sample}:star-fusion_final:{input.sf}"
        " -l \"fc-{wildcards.sample}:hg38\" \"sf-{wildcards.sample}:hg38\""
        " -f extensive -o -"
        " | grep -vE \"FuMa::\""
        " > {output.txt}"

rule subset_sf:
    input:
        sf=RUN.output("{sample}/fusion/{sample}.star-fusion"),
        isect=RUN.output("{sample}/fusion/{sample}.fuma"),
        subset_script=RUN.settings["sf_subset_script"],
    output:
        sf=RUN.output("{sample}/fusion/{sample}.sf-isect")
    conda: srcdir("envs/subset_sf.yml")
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.subset_script} {input.isect} {input.sf} > {output.sf} || rm -f {output.sf}"

rule plot_isect:
    input:
        txt=RUN.output("{sample}/fusion/{sample}.sf-isect"),
    output:
        svg=RUN.output("{sample}/fusion/{sample}.sf-isect-circos/fsnviz.svg"),
        png=RUN.output("{sample}/fusion/{sample}.sf-isect-circos/fsnviz.png"),
    conda: srcdir("envs/plot_fusion.yml")
    singularity: containers["fsnviz"]
    shell:
        "PERL5LIB=\"\" fsnviz --out-dir `dirname {output.svg}` --png"
        " -k human.hg38 star-fusion {input.txt}"

rule combine_plots:
    input:
        sf=RUN.output("{sample}/fusion/{sample}.star-fusion.svg"),
        fc=RUN.output("{sample}/fusion/{sample}.fusioncatcher.svg"),
        isect=RUN.output("{sample}/fusion/{sample}.sf-isect.svg"),
        combine_script=RUN.settings["plot_combined_script"]
    output:
        svg=RUN.output("{sample}/fusion/{sample}.fusions-combined.svg"),
    conda: srcdir("envs/combine_plots.yml")
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.combine_script}"
        " 'STAR-Fusion':{input.sf} 'FusionCatcher':{input.fc}"
        " 'Intersection':{input.isect} {output.svg}"
