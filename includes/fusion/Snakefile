include: "common.smk"


# Put each sample name in a SimpleNamespace to mimic Snakemake wildcard usage
# (e.g {wildcards.sample}). This is only used in the 'all' rule.
samples = [SimpleNamespace(sample=sample) for sample in pep.sample_table["sample_name"]]


rule all:
    input:
        arriba=[module_output.arriba(sample) for sample in samples],
        json=[module_output.json(sample) for sample in samples],


rule arriba:
    input:
        bam=get_bam,
        ref=config["genome_fasta"],
        gtf=config["gtf"],
        blacklist=config["blacklist"],
        known_fusions=config["known_fusions"],
        protein_domains=config["protein_domains"],
    output:
        fusions="{sample}/fusion/arriba/fusions.raw.tsv",
        discarded="{sample}/fusion/arriba/fusions.raw.discarded.tsv",
    log:
        "log/arriba.{sample}.txt",
    threads: 1
    container:
        containers["arriba"]
    shell:
        """
        arriba \
            -x {input.bam} \
            -a {input.ref} \
            -g {input.gtf} \
            -b {input.blacklist} \
            -k {input.known_fusions} \
            -t {input.known_fusions} \
            -p {input.protein_domains} \
            -o {output.fusions} \
            -O {output.discarded} 2> {log}
        """


rule filter_fusions:
    input:
        fusions="{sample}/fusion/arriba/fusions.raw.tsv",
        to_json=srcdir("scripts/arriba2json.py"),
        to_tsv=srcdir("scripts/json2arriba.py"),
        report_genes=config["report_genes"],
    output:
        json="{sample}/fusion/arriba/fusions.json",
        tsv="{sample}/fusion/arriba/fusions.tsv",
    log:
        "log/arriba_to_json.{sample}.txt",
    threads: 1
    container:
        containers["arriba"]
    shell:
        """
        {input.to_json} {input.fusions} --report-genes {input.report_genes} > {output.json} 2> {log}
        {input.to_tsv} {output.json} > {output.tsv} 2>> {log}
        """


rule plot_fusions:
    input:
        fusions="{sample}/fusion/arriba/fusions.tsv",
        bam=get_bam,
        bai=get_bai,
        gtf=config["gtf"],
        blacklist=config["blacklist"],
        cytobands=config["cytobands"],
        protein_domains=config["protein_domains"],
    output:
        fusions="{sample}/fusion/arriba/fusions.pdf",
    log:
        "log/plot_fusions.{sample}.txt",
    threads: 1
    container:
        containers["arriba"]
    shell:
        """
        draw_fusions.R \
          --fusions={input.fusions} \
          --alignments={input.bam} \
          --annotation={input.gtf} \
          --cytobands={input.cytobands} \
          --proteinDomains={input.protein_domains} \
          --sampleName={wildcards.sample} \
          --output={output.fusions} 2> {log}
        """


rule split_fusion_plots:
    input:
        fusions="{sample}/fusion/arriba/fusions.pdf",
    output:
        folder=directory("{sample}/fusion/arriba/plots"),
    log:
        "log/split_fusion_plots.{sample}.txt",
    threads: 1
    container:
        containers["poppler"]
    shell:
        """
        mkdir -p {output.folder}
        pdftoppm -png {input.fusions} {output.folder}/fusion
        """


rule json_output:
    input:
        json="{sample}/fusion/arriba/fusions.json",
        plots="{sample}/fusion/arriba/plots",
        src=srcdir("scripts/json-output.py"),
    output:
        json="{sample}/fusion/fusion-output.json",
    log:
        "log/fusion_json_output.{sample}.txt",
    threads: 1
    container:
        containers["arriba"]
    shell:
        """
        {input.src} {input.json} {input.plots} > {output} 2> {log}
        """
