include: "common.smk"


# Put each sample name in a SimpleNamespace to mimic Snakemake wildcard usage
# (e.g {wildcards.sample}). This is only used in the 'all' rule.
samples = [SimpleNamespace(sample=sample) for sample in pep.sample_table["sample_name"]]


rule all:
    input:
        kmt2a_csv=[module_output.kmt2a_csv(sample) for sample in samples],
        kmt2a_plots=[module_output.kmt2a_plot(sample) for sample in samples],
        flt3_csv=[module_output.flt3_csv(sample) for sample in samples],
        flt3_plots=[module_output.flt3_plot(sample) for sample in samples],
        json=[module_output.json(sample) for sample in samples],


rule align_reads:
    input:
        fq1=get_forward,
        fq2=get_reverse,
        fasta=config["fasta"],
    output:
        bam="{sample}/itd/{sample}.itd.bam",
        bai="{sample}/itd/{sample}.itd.bai",
    log:
        "log/align_reads.{sample}.txt",
    params:
        rg="@RG\\tID:{sample}\\tSM:{sample}",
    threads: 3
    container:
        containers["bwa-0.7.17-samtools-1.3.1-picard-2.9.2"]
    shell:
        """
        bwa mem \
            -R '{params.rg}' \
            -t {threads} \
            -L 2,2 \
            {input.fasta} \
            {input.fq1:q} {input.fq2:q} 2> {log} \
        | samtools view \
            -Sbh \
            -F 0x4 \
            - \
        | picard -Xmx4G SortSam \
            I=/dev/stdin \
            O={output.bam} \
            SO=coordinate \
            CREATE_INDEX=true
        """


rule detect_itd_kmt2a:
    input:
        bam="{sample}/itd/{sample}.itd.bam",
        bai="{sample}/itd/{sample}.itd.bai",
        ref=config["fasta"],
    output:
        csv="{sample}/itd/{sample}.kmt2a.csv",
        bg_csv="{sample}/itd/{sample}.kmt2a.bg.csv",
    params:
        # Region of interest for kmt2a ~ exon 2-10 in transcript coordinates.
        trx_name=config["kmt2a_name"],
        start=config["kmt2a_start"],
        end=config["kmt2a_end"],
    log:
        "log/detect_itd_kmt2a.{sample}.txt",
    container:
        containers["rose"]
    shell:
        """
        rose-dt \
            -r {params.trx_name}:{params.start}-{params.end} \
            --bg-counts {output.bg_csv} \
            {input.ref} \
            {input.bam} > {output.csv} 2> {log}
        """


rule plot_itd_kmt2a:
    input:
        csv="{sample}/itd/{sample}.kmt2a.csv",
        bg_csv="{sample}/itd/{sample}.kmt2a.bg.csv",
    output:
        png="{sample}/itd/{sample}.kmt2a.png",
    log:
        "log/plot_itd_kmt2a.{sample}.txt",
    container:
        containers["rose"]
    shell:
        """
        rose-dt-plot.py \
            --sample-id {wildcards.sample} \
            --mode per-event \
            {input.csv} \
            {input.bg_csv} \
            {output.png} 2> {log}
        """


## FLT3 ##
rule detect_itd_flt3:
    input:
        bam="{sample}/itd/{sample}.itd.bam",
        bai="{sample}/itd/{sample}.itd.bai",
        ref=config["fasta"],
    output:
        csv="{sample}/itd/{sample}.flt3.csv",
        bg_csv="{sample}/itd/{sample}.flt3.bg.csv",
    params:
        # Region of interest for flt3 ~ exon 14-15 in transcript coordinates.
        trx_name=config["flt3_name"],
        start=config["flt3_start"],
        end=config["flt3_end"],
    log:
        "log/detect_itd_flt3.{sample}.txt",
    container:
        containers["rose"]
    shell:
        """
        rose-dt \
            -r {params.trx_name}:{params.start}-{params.end} \
            --bg-counts {output.bg_csv} \
            {input.ref} \
            {input.bam} > {output.csv} 2> {log}
        """


rule plot_itd_flt3:
    input:
        csv="{sample}/itd/{sample}.flt3.csv",
        bg_csv="{sample}/itd/{sample}.flt3.bg.csv",
    output:
        png="{sample}/itd/{sample}.flt3.png",
    log:
        "log/plot_itd_flt3.{sample}.txt",
    container:
        containers["rose"]
    shell:
        """
        rose-dt-plot.py \
             --sample-id {wildcards.sample} \
             --mode per-event \
             {input.csv} \
             {input.bg_csv}\
             {output.png} 2> {log}
        """


rule json_output:
    input:
        flt3_csv="{sample}/itd/{sample}.flt3.csv",
        flt3_plot="{sample}/itd/{sample}.flt3.png",
        kmt2a_csv="{sample}/itd/{sample}.kmt2a.csv",
        kmt2a_plot="{sample}/itd/{sample}.kmt2a.png",
        src=srcdir("scripts/json-output.py"),
    output:
        "{sample}/itd/itd-output.json",
    log:
        "log/itd_json_output.{sample}.txt",
    container:
        containers["rose"]
    shell:
        """
        python3 {input.src} \
            {input.flt3_csv} \
            {input.flt3_plot} \
            {input.kmt2a_csv} \
            {input.kmt2a_plot} > {output} 2> {log}
        """
