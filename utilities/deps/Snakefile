import os

# TODO
# - remove scrdir
# - add option to specify output folder
containers = {
    "bwa-0.7.17-samtools-1.3.1-picard-2.9.2": "docker://quay.io/biocontainers/mulled-v2-1c6be8ad49e4dfe8ab70558e8fb200d7b2fd7509:5900b4e68c4051137fffd99165b00e98f810acae-0",
    "fsnviz": "docker://quay.io/biocontainers/fsnviz:0.3.0--py_3",
    "hamlet-scripts": "docker://lumc/hamlet-scripts:0.3",
    "debian": "docker://debian:buster-slim",
    "fuma": "docker://quay.io/biocontainers/fuma:4.0.0--pyhb7b1952_0",
    "fusioncatcher": "docker://quay.io/biocontainers/fusioncatcher:1.33--hdfd78af_3",
    "samtools": "docker://quay.io/biocontainers/samtools:1.6--h244ad75_4",
    "star-fusion": "docker://quay.io/biocontainers/star-fusion:1.10.0--hdfd78af_1",
    "picard": "docker://quay.io/biocontainers/picard:2.20.5--0",
    "gsnap": "docker://quay.io/biocontainers/gmap:2021.02.22--pl526h2f06484_0",
    "vep": "docker://quay.io/biocontainers/ensembl-vep:101.0--pl526hecda079_1",
    "zip": "docker://lumc/zip:3.0",
}

settings = {
    "reference_url": "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz",
    "reference_fai": "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai",
    "refflat": "http://hgdownload.cse.ucsc.edu/goldenpath/hg38/database/refFlat.txt.gz",
    #'gtf': 'https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.ensGene.gtf.gz'
    # "gtf": "https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz",
    "gtf": "http://ftp.ensembl.org/pub/release-104/gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz",
    "vep_cache": "https://ftp.ensembl.org/pub/release-101/variation/indexed_vep_cache/homo_sapiens_merged_vep_101_GRCh38.tar.gz",
    # See https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/
    "starfusion_lib": "https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play.tar.gz",
}

reference_fname = settings["reference_url"].split("/")[-1][:-3]
reference_fai = os.path.basename(settings["reference_fai"])
reference_dict = os.path.splitext(reference_fname)[0] + ".dict"

gtf_file = os.path.splitext(os.path.basename(settings["gtf"]))[0]
gtf_renamed = os.path.splitext(gtf_file)[0] + ".chr.gtf"

vep_cache_fname = settings["vep_cache"].split("/")[-1]


rule all:
    input:
        fai=reference_fai,
        fasta_dict=reference_dict,
        refflat="ucsc_gencode.refFlat",
        bed_variant_hotspots="hotspots_genome.bed",
        cache_vep="homo_sapiens_merged",
        expression_gtf=gtf_renamed,
        flt3_fasta="flt3-001.fa",
        kmt2a_fasta="kmt2a-213.fa",
        fusioncatcher_data="fusioncatcher",
        genome_fasta=reference_fname,
        genome_gmap_index="gmap-genome-index",
        genome_star_fusion_lib="GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play",
        ref_id_mapping="id_mappings.tsv",
        rrna_refflat="ucsc_rrna.refFlat",
        transcripts_bed="transcripts.bed",
        bwa_index="flt3-001.fa.bwt",


rule download_reference:
    output:
        fasta=reference_fname,
    params:
        url=settings["reference_url"],
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        rm -f {output.fasta}.gz &&
        wget {params.url} &&
        gzip -dc {output.fasta}.gz > {output.fasta}
        """


rule download_fai:
    output:
        reference_fai,
    params:
        settings["reference_fai"],
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        wget {params} -O {output}
        """


rule download_gtf:
    output:
        gtf_file,
    params:
        settings["gtf"],
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        wget {params} &&
        gunzip {output}.gz
        """


rule rewrite_gtf:
    """ Add the 'chr' prefix to the chromosome names """
    input:
        gtf=rules.download_gtf.output,
        rewrite=srcdir("scripts/rewrite-gtf.py"),
    output:
        gtf=gtf_renamed,
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        {input.rewrite} {input.gtf} > {output.gtf}
        """


rule create_dict:
    input:
        rules.download_reference.output.fasta,
    output:
        reference_dict,
    singularity:
        containers["picard"]
    shell:
        """
        picard CreateSequenceDictionary R={input} O={output}
        """


rule create_gmap_index:
    input:
        fasta=rules.download_reference.output.fasta,
    params:
        genomedb=os.path.splitext(reference_fname)[0],
    output:
        directory("gmap-genome-index"),
    singularity:
        containers["gsnap"]
    shell:
        """
        gmap_build \
            --dir {output} \
            --genomedb {params.genomedb} \
            {input.fasta}
        """


rule download_refflat:
    output:
        "ucsc_gencode.refFlat",
    params:
        url=settings["refflat"],
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        wget {params.url} &&
        gzip -dc refFlat.txt.gz > {output} &&
        rm refFlat.txt.gz
        """


rule create_id_mappings:
    input:
        srcdir("small-files/id_mappings.tsv"),
    output:
        "id_mappings.tsv",
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        cp {input} {output}
        """


rule create_rRNA_refflat:
    """ Taken from https://gist.github.com/b8307038/55fb526e72141fac9f0aa2bc0e1f5997 """
    input:
        ref_dict=rules.create_dict.output,
        gtf=rules.rewrite_gtf.output,
    output:
        refflat="ucsc_rrna.refFlat",
    singularity:
        containers["hamlet-scripts"]
    shell:
        """

        # Include SQ headers to match the reference
        grep "^@SQ" {input.ref_dict} | cut -f 1,2,3 > {output.refflat}

        # Pattern to find rebozyme transcripts
        ribozyme='gene_biotype "rRNA"\|gene_biotype "Mt_rRNA"\|gene_biotype "Mt_tRNA"\|gene_biotype "ribozyme"'
        # Intervals for rRNA transcripts
        grep "$ribozyme" {input.gtf} | \
        awk '$3 == "gene"' | \
        cut -f1,4,5,7,9 | \
        perl -lane '
            /gene_id "([^"]+)"/ or die "no gene_id on $.";
            print join "\t", (@F[0,1,2,3], $1)
        ' | \
        sort -k1V -k2n -k3n >> {output.refflat}
        """


rule fuma_bedfile:
    input:
        gtf=rules.rewrite_gtf.output,
        script=srcdir("scripts/fuma-gencode-gtf-to-bed"),
    output:
        "transcripts.bed",
    singularity:
        containers["fuma"]
    shell:
        """
        {input.script} \
            {input.gtf} > {output}
        """


rule genome_hotspots:
    input:
        srcdir("small-files/hotspots_genome.bed"),
    output:
        "hotspots_genome.bed",
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        cp {input} {output}
        """


rule download_vep_cache:
    params:
        ftp=settings["vep_cache"],
        fname=vep_cache_fname,
    output:
        "homo_sapiens_merged_vep_101_GRCh38.tar.gz",
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        wget {params.ftp}
        """


rule unpack_vep_cache:
    input:
        "homo_sapiens_merged_vep_101_GRCh38.tar.gz",
    output:
        directory("homo_sapiens_merged"),
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        tar xzf {input}
        """


rule copy_fasta:
    input:
        flt3=srcdir("small-files/flt3-001.fa"),
        kmt2a=srcdir("small-files/kmt2a-213.fa"),
    output:
        flt3="flt3-001.fa",
        kmt2a="kmt2a-213.fa",
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        cp {input.flt3} {output.flt3}
        cp {input.kmt2a} {output.kmt2a}
        """


rule download_fusioncatcher:
    output:
        folder=directory("fusioncatcher"),
        filename="fusioncatcher/current/1000genomes.txt",
    singularity:
        containers["fusioncatcher"]
    shell:
        """
        export FC_DB_PATH={output.folder}
        mkdir -p {output.folder}
        download-human-db.sh
        """


rule download_star_fusion:
    params:
        lib=settings["starfusion_lib"],
    output:
        "GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play.tar.gz",
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        wget {params.lib}
        """


rule unpack_star_fusion:
    input:
        "GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play.tar.gz",
    output:
        directory("GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play"),
    singularity:
        containers["hamlet-scripts"]
    shell:
        """
        tar -zxvf {input}
        """


rule bwa_index_ktm2a_flt3:
    input:
        flt3=rules.copy_fasta.output.flt3,
        kmt2a=rules.copy_fasta.output.kmt2a,
    output:
        flt3="flt3-001.fa.bwt",
        kmt2a="kmt2a-213.fa.bwt",
    singularity:
        containers["bwa-0.7.17-samtools-1.3.1-picard-2.9.2"]
    shell:
        """
        bwa index {input.flt3} &&
        bwa index {input.kmt2a}
        """
