from rattle import Run, ReadGroup


RUN = Run(config)


rule all:
    input:
        fqs=[RUN.output("{sample}/{sample}-{pair}.fq.gz", fmt=True,
                        sample=unit.sample, pair=pair)
             for unit in RUN.unit_names for pair in ("R1", "R2")],

rule fastqc_raw:
    """Runs FastQC for each pair of each read group of each sample given in the config file."""
    input:
        fq=RUN.config_input_func(ReadGroup, "{pair}"),
    output:
        dir=RUN.output("{sample}/{read_group}/qc/fastqc-{{pair}}-raw", fmt=True),
    threads: 4
    conda: "envs/fastqc.yml"
    shell:
        "mkdir -p {output.dir}"
        " && fastqc -o {output.dir} --extract --nogroup -f fastq --threads {threads} {input.fq}"

rule clip_trim_sync_seq:
    """Clips FastQC-detected adapter sequences and then trims low quality bases from all read pairs."""
    input:
        fq1=RUN.config_input_func(ReadGroup, "R1"),
        fq2=RUN.config_input_func(ReadGroup, "R2"),
        fqc1=RUN.output("{sample}/{read_group}/qc/fastqc-R1-raw", fmt=True),
        fqc2=RUN.output("{sample}/{read_group}/qc/fastqc-R2-raw", fmt=True),
        contams_file=RUN.settings["contaminants_file"],
    output:
        fq1=temp(RUN.output("{sample}/{read_group}/qc/{sample}-{read_group}-R1.fq.gz")),
        fq2=temp(RUN.output("{sample}/{read_group}/qc/{sample}-{read_group}-R2.fq.gz")),
    threads: 2
    conda: "envs/clip_trim_sync.yml"
    shell:
        "python helper/clip_trim_sync.py --i1 {input.fq1} --i2 {input.fq2}"
        " --fqc1 {input.fqc1} --fqc2 {input.fqc2}"
        " --o1 {output.fq1} --o2 {output.fq2} --contaminants {input.contams_file}"

rule fastqc_processed:
    """Runs FastQC for each pair of QC-ed inputs."""
    input:
        fq=RUN.output("{sample}/{read_group}/qc/{sample}-{read_group}-{pair}.fq.gz"),
    output:
        dir=RUN.output("{sample}/{read_group}/qc/fastqc-{pair}-processed"),
    threads: 4
    conda: "envs/fastqc.yml"
    shell:
        "mkdir -p {output.dir}"
        " && fastqc -o {output.dir} --extract --nogroup -f fastq --threads {threads} {input.fq}"

rule merge_fastqs:
    """Merges all FASTQ files for a given sample from its read groups."""
    input:
        fqs=lambda wildcards: [RUN.output("{sample}/{read_group}/qc/{sample}-{read_group}-{pair}.fq.gz",
                                          fmt=True, sample=wildcards.sample, read_group=rgn, pair=wildcards.pair)
                               for rgn in RUN.samples[wildcards.sample].read_groups]
    output:
        fq=RUN.output("{sample}/{sample}-{pair}.fq.gz"),
    threads: 1
    shell:
        "zcat {input.fqs} | gzip -c > {output.fq}"
